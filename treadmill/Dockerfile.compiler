FROM alpine:3.7

MAINTAINER Seungyong Lee <wdyd2004@naver.com>

# References:
# [1] Golang Dockerfile: https://github.com/docker-library/golang
# [2] Java Dockerfile: https://github.com/anapsix/docker-alpine-java

# Set Java env (from [2])
ENV JAVA_VERSION_MAJOR=9 \
    JAVA_VERSION_MINOR=0 \
    JAVA_VERSION_BUILD=0 \
    JAVA_PACKAGE=jdk9 \
    JAVA_JCE=standard \
    JAVA_HOME=/opt/jdk \
    PATH=${PATH}:/opt/jdk/bin \
    LANG=C.UTF-8

# Install required packages
RUN set -uex && apk add --no-cache --update \
    # installs base packages (gcc, g++, make, musl-dev, etc.)
    build-base \
    # required by: golang, docker-alpine-java
    ca-certificates \
    # required by: golang
    openssl \
    # required by: golang, docker-alpine-java
    bash \
    # required by: docker-alpine-java
    curl \
    # required by: golang
    go

# Install go (from [1])
RUN export \
    # set GOROOT_BOOTSTRAP such that we can actually build Go
    GOROOT_BOOTSTRAP="$(go env GOROOT)" \
    # ... and set "cross-building" related vars to the installed system's values so that we create a build targeting the proper arch
    # (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)
    GOOS="$(go env GOOS)" \
    GOARCH="$(go env GOARCH)" \
    GOHOSTOS="$(go env GOHOSTOS)" \
    GOHOSTARCH="$(go env GOHOSTARCH)" \
    ; \
    # also explicitly set GO386 and GOARM if appropriate
    # https://github.com/docker-library/golang/issues/184
    apkArch="$(apk --print-arch)"; \
    case "$apkArch" in \
        armhf) export GOARM='6' ;; \
        x86) export GO386='387' ;; \
    esac; \
    \
    wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
    echo 'f3de49289405fda5fd1483a8fe6bd2fa5469e005fd567df64485c4fa000c7f24 *go.tgz' | sha256sum -c -; \
    tar -C /usr/local -xzf go.tgz; \
    rm go.tgz; \
    \
    cd /usr/local/go/src; \
    for p in /go-alpine-patches/*.patch; do \
        [ -f "$p" ] || continue; \
        patch -p2 -i "$p"; \
    done; \
    ./make.bash; \
    \
    rm -rf /go-alpine-patches; \
    apk del .build-deps; \
    \
    export PATH="/usr/local/go/bin:$PATH"; \
    go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"

# Install JDK 9.0 (from [2])
RUN echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /opt/jdk && \
    curl -jksSLH "Cookie: oraclelicense=accept-securebackup-cookie" http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.tar.gz -o /tmp/jdk.tar.gz && \
    JAVA_PACKAGE_SHA256=$(curl -sSL http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.sha256 | awk '{print $NF}') && \
    echo "${JAVA_PACKAGE_SHA256}  /tmp/jdk.tar.gz" > /tmp/jdk.tar.gz.sha256 && \
    sha256sum -c /tmp/jdk.tar.gz.sha256 && \
    tar zxvf /tmp/jdk.tar.gz -C /opt/jdk --strip-components=1 && \
    rm /tmp/jdk.tar.gz
