# Generated by Django 2.0.3 on 2018-04-03 17:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'channel',
            },
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_set_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Batch', 'batch'), ('Batch with grader', 'batch_with_grader'), ('Output only', 'output_only')], max_length=255)),
                ('time_limit', models.IntegerField()),
                ('memory_limit', models.IntegerField()),
                ('grading_info', models.TextField()),
                ('grader_source', models.URLField()),
                ('test_data', models.URLField()),
            ],
            options={
                'db_table': 'data_set',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notice_id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('read_count', models.IntegerField()),
            ],
            options={
                'db_table': 'notice',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('expired_date', models.DateTimeField()),
                ('redirect_url', models.URLField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification',
            },
        ),
        migrations.CreateModel(
            name='Palestra',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('palestra_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'palestra',
            },
        ),
        migrations.CreateModel(
            name='PalestraProblem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('palestra_problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('order', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('palestra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Palestra')),
            ],
            options={
                'db_table': 'palestra_problem',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Batch', 'batch'), ('Reactive', 'reactive'), ('Output only', 'output_only')], max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('In progress', 'in_progress'), ('In testing', 'in_testing'), ('Done', 'done')], max_length=255)),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('data_set', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.DataSet')),
            ],
            options={
                'db_table': 'problem',
            },
        ),
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem_tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Problem')),
            ],
            options={
                'db_table': 'problem_tag',
            },
        ),
        migrations.CreateModel(
            name='RecommendedProblem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recommended_problem',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submission_id', models.AutoField(primary_key=True, serialize=False)),
                ('language', models.CharField(choices=[('c++', 'c'), ('c++11', 'c11'), ('c++14', 'c14'), ('c++17', 'c17'), ('python2', 'python2'), ('python3', 'python3'), ('pypy', 'pypy'), ('pypy3', 'pypy3'), ('java', 'java'), ('go', 'go')], max_length=255)),
                ('submission_data', models.URLField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'submission',
            },
        ),
        migrations.CreateModel(
            name='SubmissionResult',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('In queue', 'in_queue'), ('Judging', 'judging'), ('Wrong answer', 'wrong_answer'), ('Time limit exceed', 'time_limit_exceed'), ('Memory limit exceed', 'memory_limit_exceed'), ('Runtime error', 'runtime_error'), ('Accepted', 'accepted')], max_length=255)),
                ('memory', models.IntegerField()),
                ('time', models.IntegerField()),
                ('code_size', models.IntegerField()),
                ('score', models.IntegerField()),
                ('compiled_message', models.TextField()),
                ('detail', models.TextField()),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Submission')),
            ],
            options={
                'db_table': 'submission_result',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'team',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('thread_id', models.AutoField(primary_key=True, serialize=False)),
                ('message_body', models.TextField()),
                ('channel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'thread',
            },
        ),
        migrations.AddField(
            model_name='problemtag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tag'),
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=models.ManyToManyField(through='api.ProblemTag', to='api.Tag'),
        ),
        migrations.AddField(
            model_name='problem',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Team'),
        ),
        migrations.AddField(
            model_name='palestraproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Problem'),
        ),
        migrations.AddField(
            model_name='palestra',
            name='problems',
            field=models.ManyToManyField(through='api.PalestraProblem', to='api.Problem'),
        ),
        migrations.AddField(
            model_name='palestra',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Team'),
        ),
        migrations.AddField(
            model_name='channel',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Problem'),
        ),
        migrations.AddField(
            model_name='channel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Team'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
